{"version":3,"sources":["javascript/timeslotLogic.js","Components/Admin/Admin.jsx","Components/NotFound.jsx","Components/Timeslot/AdjustEntries.jsx","Components/Admin/TimeslotPost.jsx","javascript/adminLogic.js","Components/Admin/Day.jsx","Components/Admin/AdminEventView.jsx","Components/Timeslot/EventDay.jsx","Components/Timeslot/SailorEventView.jsx","App.js","index.js"],"names":["getTimeslots","Axios","get","then","response","data","updateTimeslotByUUID","UUID","day","time","slotsAvailableByDay","inspectionReq","a","correctDaySlots","entriesLeft","i","length","index","unavailableSlots","push","results","filter","element","uuid","inspectionReqs","currentReqs","put","fetchEventDetails","ilcaNum","fetchSailorDetails","Admin","useState","timeslots","setTimeslots","useEffect","style","display","flexDirection","flexAlign","textAlign","className","src","alt","width","margin","marginBottom","Button","variant","color","href","map","el","marginTop","eventTitle","hostCity","hostCountry","maxWidth","maxHeight","logoURL","marginLeft","marginRight","backgroundColor","NotFound","to","AdjustEntries","setSlotsAvailableByDay","handleEntryChange","method","replacementObj","Object","assign","indexOf","ind","console","log","timeslot","onClick","TimeslotPost","interval","setInterval","Date","shutoffDate","setShutoffDate","selectedDates","setSelectedDates","entryLimit","setEntryLimit","setILCANum","timeFrom","setTimeFrom","moment","startValue","setStartValue","timeTo","setTimeTo","endValue","setEndValue","startDate","endDate","key","calendar","setCalendar","format","formatted","getDates","date","setDateObj","parsedStart","_d","toString","split","parseInt","startTimeSum","parsedEnd","endTimeSum","handleTimeslotPost","uuidv4","details","title","post","alert","postCreatedTimeslotToDB","city","country","logo","setTimeout","reload","window","location","prototype","addDays","days","dat","this","valueOf","setDate","getDate","stopDate","dateArray","currentDate","slotsObj","dailyArr","fontSize","editableDateInputs","onChange","item","selection","moveRangeOnFirstSelection","ranges","value","TextField","id","label","type","e","target","FormControl","InputLabel","Select","MenuItem","val","test","handleNumberInput","showSecond","allowEmpty","minuteStep","setHours","setMinutes","keys","resetUnavailable","selected_date","from","onSelectTime","slot","handleSetUnavailable","border","getSignupByEventNum","signup","Day","slotsByDay","getRegistered","moveToggle","toggledTime","toggledDate","unToggle","sailorToMove","moveSailorInDB","changeTimeFormat","div","minutes","hours","Math","floor","borderBottom","paddingBottom","info","disabled","ViewEvent","useParams","currentSignup","setCurrentSignup","dates","setDates","setSlotsByDay","registered","setRegistered","setMoveToggle","setToggledTime","setToggledDate","setSailorToMove","eventDetails","setEventDetails","sailorsRemainingUnsigned","setSailorsRemainingUnsigned","sailorsSignedUp","setSailorsSignedUp","csvHeadersUnregistered","sailors","registeredSailorIDs","sailorID","filteredSailors","sailor","isaf","csv","timeList","timeListForFilter","currentSlot","filteredEntries","req","y","shiftedReq","shift","name","firstName","familyName","unshift","unToggleSailorMove","slotsIndex","nonMatchingArr","inspec","matchingObj","replacementInspecObj","replacementEntriesLeft","replacementSlotsObj","updateSailorInspection","handleRemoveSailor","newInspectionReqs","removeSailorFromEvent","reloadPage","toggleSailorMove","deleteSheet","delete","removeSignupByEventNum","redirToAdmin","preventDefault","handleSubmitDateChange","shutoff","newShutoffDate","commitTimeChangeInDB","justifyContent","alignItems","headers","filename","EventDay","currentSailor","setSelected","selectedTime","isSelected","deselect","submitInspectionReq","selectedDate","SailorEventView","active","setActive","currentEntries","setCurrentEntries","inspectionReqIDs","setInspectionReqIDs","setSailorID","setCurrentSailor","setSelectedTime","setIsSelected","setSelectedDate","handleIDSubmission","filteredTimeslots","sorted","sort","b","selectedSailor","entry","currentlyScheduledInspections","inspection","sailorEntry","height","Autocomplete","options","getOptionLabel","option","getOptionSelected","event","renderInput","params","App","exact","path","component","children","AdminEventView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d3a01a0.chunk.js","sourcesContent":["import Axios from 'axios';\n\nexport const getCurrentlyScheduledInspections = (UUID) => {\n  // Retrieves the full list of registered inspections\n  let currentReqs = getTimeslots().then((results) => {\n    let filteredResults = results.filter((element) => element.uuid === UUID);\n    return filteredResults[0].inspectionReqs;\n  });\n  return currentReqs;\n};\n\nexport const postCreatedTimeslotToDB = (\n  // Posts a newly created inspection signup to the DB\n  slotsAvailableByDay,\n  inspectionReqs,\n  interval,\n  entryLimit,\n  selectedDates,\n  shutoffDate,\n  eventTitle,\n  hostCity,\n  hostCountry,\n  logoURL,\n  startDate,\n  endDate,\n  ilcaNum,\n  timeFrom,\n  timeTo,\n  uuid\n) => {\n  Axios.post('https://ilca-inspection-server.herokuapp.com/signups/created/', {\n    slotsAvailableByDay: slotsAvailableByDay,\n    inspectionReqs: inspectionReqs,\n    interval: interval,\n    entryLimit: entryLimit,\n    selectedDates: selectedDates,\n    shutoffDate: shutoffDate,\n    eventTitle: eventTitle,\n    hostCity: hostCity,\n    hostCountry: hostCountry,\n    logoURL: logoURL,\n    startDate: startDate,\n    endDate: endDate,\n    ilcaNum: ilcaNum,\n    timeFrom: timeFrom,\n    timeTo: timeTo,\n    uuid: uuid,\n  }).then(\n    alert(\n      `Timeslot Posted. The link to the timeslot can be found in the admin page for the Event: ${eventTitle}`\n    )\n  );\n};\n\nexport const getTimeslots = () => {\n  // Retrieves all currently created timeslots\n  const res = Axios.get('https://ilca-inspection-server.herokuapp.com/signups/options').then(\n    (response) => {\n      return response.data;\n    }\n  );\n  return res;\n};\n\nexport const updateTimeslotByUUID = async (\n  UUID,\n  day,\n  time,\n  slotsAvailableByDay,\n  inspectionReq\n) => {\n  // Sends a PUT request to update a timeslot's information based on a new inspection request\n  let correctDaySlots = slotsAvailableByDay[day].entriesLeft;\n  let index;\n  for (let i = 0; i < slotsAvailableByDay[day].entriesLeft.length; i++) {\n    if (correctDaySlots[i][0] === time) {\n      index = i;\n    }\n  }\n  correctDaySlots[index][1] -= 1;\n\n  if (correctDaySlots[index][1] === 0) {\n    slotsAvailableByDay[day].unavailableSlots.push(correctDaySlots[index][0]);\n  }\n  slotsAvailableByDay[day].entriesLeft = correctDaySlots;\n  getTimeslots()\n    .then(\n      (results) =>\n        results.filter((element) => element.uuid === UUID)[0].inspectionReqs\n    )\n    .then((currentReqs) => {\n      Axios.put(`https://ilca-inspection-server.herokuapp.com/signups/update/${UUID}`, {\n        slotsAvailableByDay: slotsAvailableByDay,\n        inspectionReqs: [...currentReqs, inspectionReq],\n      });\n    });\n};\n\nexport const fetchEventDetails = (ilcaNum) => {\n  const res = Axios.get(`https://ilca-inspection-server.herokuapp.com/events/details/${ilcaNum}`).then(\n    (response) => {\n      return response.data;\n    }\n  );\n  return res;\n};\n\nexport const fetchSailorDetails = (ilcaNum) => {\n  const res = Axios.get(`https://ilca-inspection-server.herokuapp.com/events/sailors/${ilcaNum}`).then(\n    (response) => {\n      return response.data;\n    }\n  );\n  return res;\n};\n\n\n","import React from 'react';\n// import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getTimeslots } from '../../javascript/timeslotLogic';\nimport Button from '@material-ui/core/Button';\nimport '../../App.css';\n\nconst Admin = () => {\n  const [timeslots, setTimeslots] = useState([]);\n\n  useEffect(() => {\n    getTimeslots().then((results) => setTimeslots(results));\n  }, []);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          flexAlign: 'center',\n          textAlign: 'center',\n        }}\n      >\n        <div className=\"admin-header\">\n          <img\n            src=\"http://www.laserinternational.org/wp-content/uploads/2020/03/ILCA-logo-and-full-name-blue-and-grey.jpg\"\n            alt=\"ILCA Logo\"\n            style={{ width: 200, margin: 30, marginBottom: 0 }}\n          />\n          <h1>Equipment Inspection Sign-Up Administration</h1>\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          href=\"/admin/create\"\n          style={{ width: 300, margin: 'auto' }}\n        >\n          Create Inspection Signup\n        </Button>\n        <h3>Created Events</h3>\n        <div className=\"event-list-container\">\n          {timeslots.map((el, index) => (\n            <div className=\"admin-event-card\" key={index}>\n              <div style={{ marginTop: 10 }}>\n                <strong>{el.eventTitle}</strong>\n              </div>\n              <div style={{ marginTop: 10 }}>\n                {el.hostCity}, {el.hostCountry}\n              </div>\n              <img\n                style={{ maxWidth: 200, maxHeight: 100, margin: 15 }}\n                src={el.logoURL}\n                alt=\"event logo\"\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                href={`/admin/event/${el.ilcaNum}`}\n                style={{\n                  width: 200,\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  marginBottom: 20,\n                  backgroundColor: 'rgb(2, 114, 186)',\n                }}\n              >\n                Access Event Details\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Admin;\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => { // 404 Page\n  return (\n    <div>\n      <h1>404 Not Found</h1>\n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  )\n}\n\nexport default NotFound\n","import React from 'react';\nimport '../../App.css';\n\nconst AdjustEntries = ({\n  setSlotsAvailableByDay,\n  slotsAvailableByDay,\n  element,\n}) => {\n  const handleEntryChange = (index, method) => {\n    // Controls the effects of clicking the up or down arrows on each day's entry limit\n    let replacementObj = Object.assign({}, slotsAvailableByDay);\n    if (method === 'increase') {\n      if (\n        // if this specific slot is not found in the list of unavailable slots...\n        replacementObj[element].unavailableSlots.indexOf(\n          replacementObj[element].entriesLeft[index][0]\n        ) === -1\n      ) {\n        // ...add one to that slot's entry limit\n        replacementObj[element].entriesLeft = replacementObj[\n          element\n        ].entriesLeft.map((el, ind) =>\n          ind === index ? [el[0], el[1] + 1] : el\n        );\n      }\n      console.log(replacementObj);\n    } else if (method === 'decrease') {\n      // if this specific slot is not found in the list of unavailable slots...\n      if (\n        replacementObj[element].entriesLeft[index][1] > 0 &&\n        replacementObj[element].unavailableSlots.indexOf(\n          replacementObj[element].entriesLeft[index][0]\n        ) === -1\n      ) {\n        // ...subtract one from that slot's entry limit\n        replacementObj[element].entriesLeft = replacementObj[\n          element\n        ].entriesLeft.map((el, ind) =>\n          ind === index ? [el[0], el[1] - 1] : el\n        );\n      }\n    }\n    setSlotsAvailableByDay(replacementObj); // Replace slotsAvailableByDay with the updated object\n  };\n\n  return (\n    <div>\n      <div className=\"timeslots-available\" style={{ marginBottom: 28 }}>\n        {slotsAvailableByDay[element].entriesLeft.map((timeslot, index) => (\n          <div key={index} className=\"slot-num\">\n            <div\n              className=\"increase\"\n              onClick={() => {\n                handleEntryChange(index, 'increase');\n              }}\n            >\n              &#9651; {/* upward pointing triangle */}\n            </div>\n            <div>{timeslot[1]}</div>\n            <div\n              className=\"decrease\"\n              onClick={() => {\n                handleEntryChange(index, 'decrease');\n              }}\n            >\n              &#9661; {/* downward pointing triangle */}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AdjustEntries;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { DateRange } from 'react-date-range';\nimport { Link } from 'react-router-dom';\nimport SlotPicker from 'slotpicker';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport moment from 'moment';\nimport TimePicker from 'rc-time-picker';\nimport DatePicker from 'react-date-picker';\nimport AdjustEntries from '../Timeslot/AdjustEntries.jsx';\nimport {\n  postCreatedTimeslotToDB,\n  fetchEventDetails,\n} from '../../javascript/timeslotLogic';\nimport { v4 as uuidv4 } from 'uuid';\nimport '../../App.css';\nimport 'rc-time-picker/assets/index.css';\nimport 'react-date-range/dist/styles.css';\nimport 'react-date-range/dist/theme/default.css';\n\nconst TimeslotPost = () => {\n  const [interval, setInterval] = useState(30); // The time interval between signup time options\n  const [shutoffDate, setShutoffDate] = useState(new Date());\n  const [selectedDates, setSelectedDates] = useState([]); // An array representing the dates during which the event will take place\n  const [entryLimit, setEntryLimit] = useState(0); // The initial entry limit for all time options, though each time option can later be individually adjusted\n  const [ilcaNum, setILCANum] = useState(''); // The number designation for the particular event, which will be used in the future for an API call requesting event information\n  const [slotsAvailableByDay, setSlotsAvailableByDay] = useState({}); // This is the object that will represent all the information for each day, including unavailable slots and number of signups left per time option\n  const [timeFrom, setTimeFrom] = useState(510); // The start time for each day of inspection signup\n  const [startValue, setStartValue] = useState(moment('2021-01-01 09:00')); // The initial time for the starting time selector\n  const [timeTo, setTimeTo] = useState(870); // The end time for each day of inspection signup\n  const [endValue, setEndValue] = useState(moment('2021-01-01 18:00')); // The initial time for the ending time selector\n  const [calendar, setCalendar] = useState([\n    // The calendar's state information\n    {\n      startDate: new Date(),\n      endDate: new Date(),\n      key: 'selection',\n    },\n  ]);\n\n  useEffect(() => {\n    console.log(shutoffDate);\n    console.log(moment(shutoffDate).format('YYYY-MM-DD'));\n  }, [shutoffDate]);\n\n  useEffect(() => {\n    // Sets the list of days for the regatta and sets the \"slotsAvailableByDay\" state value\n    let days = getDates(calendar[0].startDate, calendar[0].endDate);\n    let formatted = days.map((date) => moment(date).format('YYYY-MM-DD'));\n    setSelectedDates(formatted);\n    setDateObj(formatted);\n    //eslint-disable-next-line\n  }, [calendar]);\n\n  useEffect(() => {\n    // If the entry limit is adjusted, this will update each slot to reflect the new limit unless that slot is in that day's set of unavailable slots\n    let replacementObj = Object.assign({}, slotsAvailableByDay);\n    for (let el in replacementObj) {\n      replacementObj[el].entriesLeft = replacementObj[el].entriesLeft.map(\n        (element, index) =>\n          replacementObj[el].unavailableSlots.indexOf(\n            replacementObj[el].entriesLeft[index][0]\n          ) === -1\n            ? [element[0], entryLimit]\n            : [element[0], 0]\n      );\n    }\n    setSlotsAvailableByDay(replacementObj);\n    //eslint-disable-next-line\n  }, [entryLimit]);\n\n  useEffect(() => {\n    // Adjusts the format of the \"Start Time\" input value so that it is in milliseconds, the format needed for the SlotPicker component\n    const start = moment(startValue._d.toString()).format('HH:mm');\n    const parsedStart = start.split(':').map((el) => parseInt(el));\n    const startTimeSum = parsedStart[0] * 60 + parsedStart[1];\n    setTimeFrom(startTimeSum); // For instance... ('08:30') would be transformed to 510\n  }, [startValue]);\n\n  useEffect(() => {\n    // Adjusts the format of the \"End Time\" input value so that it is in milliseconds, the format needed for the SlotPicker component\n    const end = moment(endValue._d.toString()).format('HH:mm');\n    const parsedEnd = end.split(':').map((el) => parseInt(el));\n    const endTimeSum = parsedEnd[0] * 60 + parsedEnd[1];\n    setTimeTo(endTimeSum);\n  }, [endValue]);\n\n  const handleTimeslotPost = () => {\n    // Handles Timeslot DB Submission. Currently not active. Needs some changes based on other intracomponent adjustments\n    if (ilcaNum !== '' && entryLimit !== 0 && selectedDates.length) {\n      let uuid = uuidv4(); // creates unique ID for the DB entry\n      let inspectionReqs = [];\n      fetchEventDetails(ilcaNum).then((details) => {\n        if (details.title) {\n          postCreatedTimeslotToDB(\n            // Creates a POST request, adding a new inspection signup entry to the DB\n            slotsAvailableByDay,\n            inspectionReqs,\n            interval,\n            entryLimit,\n            selectedDates,\n            shutoffDate,\n            details.title,\n            details.city,\n            details.country,\n            details.logo,\n            details.startDate.date,\n            details.endDate.date,\n            ilcaNum,\n            timeFrom,\n            timeTo,\n            uuid\n          );\n          setTimeout(reload, 600);\n        } else {\n          alert('The Event ID entered does not match any existing events');\n        }\n      });\n    } else {\n      alert('Please fill out all fields');\n    }\n  };\n\n  const reload = () => {\n    window.location.reload();\n  };\n\n  //eslint-disable-next-line\n  Date.prototype.addDays = function (days) {\n    // Function added from outside source that adds a method to Date. Probably not best practice.\n    var dat = new Date(this.valueOf());\n    dat.setDate(dat.getDate() + days);\n    return dat;\n  };\n\n  const getDates = (startDate, stopDate) => {\n    // Returns an Array of dates between two dates (inclusive)\n    let dateArray = [];\n    let currentDate = startDate;\n    while (currentDate <= stopDate) {\n      dateArray.push(currentDate);\n      currentDate = currentDate.addDays(1);\n    }\n    return dateArray;\n  };\n\n  const handleNumberInput = (e) => {\n    // Sets limits on what can be entered into the entry limit text field\n    let val = e.target.value;\n    const regexp = /^[0-9\\b]+$/; //\n    if (regexp.test(val) || val === '') {\n      // If the value only includes numbers or has a string value of ''\n      setEntryLimit(parseInt(val));\n    }\n  };\n\n  const setDateObj = (days) => {\n    // Creates the slotsAvailableByDay object from the days array (days between start and end)\n    let slotsObj = {};\n    let dailyArr = [];\n    for (let i = timeFrom; i <= timeTo - interval; i += interval) {\n      // this creates an array of the form [[time, entryLimit], ...] from the start time to the end time\n      dailyArr.push([i, entryLimit]);\n    }\n    for (let element of days) {\n      // add key value pairs of entriesLeft and unavailableSlots\n      slotsObj[element] = {};\n      slotsObj[element].entriesLeft = dailyArr;\n      slotsObj[element].unavailableSlots = [];\n    }\n    setSlotsAvailableByDay(slotsObj);\n  };\n\n  const handleSetUnavailable = (el, slot) => {\n    // Controls the effects of setting a slot unavailable by clicking on the slot;\n    let replacementObj = Object.assign({}, slotsAvailableByDay); // new placeholder object matching slotsAvailableByDay\n    replacementObj[el].unavailableSlots = [\n      // adds the selected slot to that day's unavailable slots array\n      ...replacementObj[el].unavailableSlots,\n      slot,\n    ];\n    replacementObj[el].entriesLeft = replacementObj[el].entriesLeft.map(\n      (item, index) => {\n        if (replacementObj[el].unavailableSlots.indexOf(item[0]) > -1) {\n          return [item[0], 0];\n        } else return item;\n      }\n    );\n\n    setSlotsAvailableByDay(replacementObj);\n  };\n\n  const resetUnavailable = (el) => {\n    // Resets the unavailable slots for the selected day\n    let replacementObj = Object.assign({}, slotsAvailableByDay);\n    replacementObj[el].unavailableSlots = [];\n    setSlotsAvailableByDay(replacementObj);\n  };\n\n  const handleChangeCutoff = (date) => {\n    date.setHours(23);\n    date.setMinutes(59);\n    setShutoffDate(date);\n  }\n\n  return (\n    <>\n      <header className=\"post-header\">\n        <img\n          className=\"ilca-logo\"\n          src=\"http://www.laserinternational.org/wp-content/uploads/2020/03/ILCA-logo-and-full-name-blue-and-grey.jpg\"\n          alt=\"ILCA Logo\"\n        />\n        <div className=\"post-title\">\n          <i>ILCA</i> Inspection Signup Creator\n        </div>\n      </header>\n      <div className=\"timeslot-post\">\n        <Link\n          style={{ fontSize: 20, marginBottom: 20 }}\n          className=\"link\"\n          to=\"/\"\n        >\n          Back to admin\n        </Link>\n\n        <div className=\"timeslot-options-container\">\n          <DateRange\n            className=\"calendar\"\n            editableDateInputs={true}\n            onChange={(item) => setCalendar([item.selection])}\n            moveRangeOnFirstSelection={false}\n            ranges={calendar}\n            value={calendar}\n          />\n          <div className=\"timeslot-details-group\">\n            <div className=\"timeslot-option-flex\">\n              <TextField\n                className=\"event-detail-form\"\n                id=\"filled\"\n                variant=\"filled\"\n                label=\"ILCA Event #\"\n                type=\"text\"\n                value={ilcaNum}\n                onChange={(e) => setILCANum(e.target.value)}\n              />\n              <FormControl className=\"event-detail-form\" variant=\"filled\">\n                <InputLabel id=\"demo-simple-select-filled-label\">\n                  Timeslot Interval\n                </InputLabel>\n                <Select\n                  id=\"demo-simple-select-filled\"\n                  value={interval}\n                  onChange={(e) => {\n                    setInterval(e.target.value);\n                  }}\n                >\n                  <MenuItem value={15}>15</MenuItem>\n                  <MenuItem value={30}>30</MenuItem>\n                  <MenuItem value={45}>45</MenuItem>\n                  <MenuItem value={60}>60</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                className=\"event-detail-form\"\n                id=\"filled-number\"\n                variant=\"filled\"\n                label=\"Timeslot Entry Limit\"\n                type=\"number\"\n                value={entryLimit}\n                onChange={(e) => handleNumberInput(e)}\n              />\n            </div>\n          </div>\n          <div className=\"start-end-times\">\n            <div className=\"start-end-group-container\">\n              <div className=\"start-end-group\">\n                <div className=\"label\"><strong>Start Time</strong></div>\n                <TimePicker\n                  showSecond={false}\n                  allowEmpty={false}\n                  minuteStep={15}\n                  value={startValue}\n                  onChange={(value) => setStartValue(moment(value._d))}\n                />\n              </div>\n              <div className=\"start-end-group\">\n                <div className=\"label\"><strong>End Time</strong></div>\n                <TimePicker\n                  showSecond={false}\n                  allowEmpty={false}\n                  minuteStep={15}\n                  value={endValue}\n                  onChange={(value) => setEndValue(moment(value._d))}\n                />\n              </div>\n              <div className=\"start-end-group\">\n                <div className=\"label\"><strong>Signup End Date</strong></div>\n                <DatePicker value={shutoffDate} onChange={(value) => handleChangeCutoff(value)}/>\n                <div><i>@</i></div>\n                  <strong>{moment(shutoffDate).format('HH:mm')} CST</strong>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"timeslot\">\n          <h3>Click individual slots below to make them unavailable</h3>\n          {/* <hr style={{ height: 2, backgroundColor: 'grey', border: 'none' }} /> */}\n          {Object.keys(slotsAvailableByDay).map((el, index) => (\n            <div key={index} className=\"admin-slot-container\">\n              <div style={{ textAlign: 'center', marginBottom: 10 }}>\n                <strong>{moment(el).format('D MMMM YYYY')}</strong>\n              </div>\n              <Button\n                variant=\"contained\"\n                style={{\n                  backgroundColor: 'rgb(46, 134, 175)',\n                  marginBottom: 20,\n                  color: 'white',\n                }}\n                onClick={() => {\n                  resetUnavailable(el);\n                }}\n              >\n                Reset Unavailable Slots\n              </Button>\n              <div style={{ marginBottom: 8 }}>\n                <AdjustEntries\n                  setSlotsAvailableByDay={setSlotsAvailableByDay}\n                  slotsAvailableByDay={slotsAvailableByDay}\n                  element={el}\n                />\n              </div>\n              <div style={{ marginBottom: 15 }}>\n                <SlotPicker\n                  interval={interval}\n                  unavailableSlots={slotsAvailableByDay[el].unavailableSlots}\n                  selected_date={new Date()}\n                  from={timeFrom}\n                  to={timeTo}\n                  onSelectTime={(slot) => {\n                    handleSetUnavailable(el, slot);\n                  }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ marginBottom: 20, marginTop: 40 }}\n          onClick={() => handleTimeslotPost()}\n        >\n          Submit Timeslot Sheet\n        </Button>\n        <hr\n          style={{ border: '1px solid black', width: '100%', marginBottom: 40 }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default TimeslotPost;\n","import Axios from 'axios';\n\nexport const getSignupByEventNum = (ilcaNum) => {\n  const res = Axios.get('https://ilca-inspection-server.herokuapp.com/signups/options').then(\n    (response) => {\n      return response.data.filter((signup) => signup.ilcaNum === ilcaNum);\n    }\n  );\n  return res;\n};\n\nexport const updateSailorInspection = (\n  // Updates the DB by changing a sailor's inspection time and date to the newly modified ones, as well as updating the slots remaining for the 'from' time as well as the 'to' time\n  sailorID,\n  timeFrom,\n  timeTo,\n  day,\n  registered,\n  ilcaNum,\n  slotsByDay,\n  slotsIndex\n) => {\n  let nonMatchingArr = registered.filter(\n    (inspec) => inspec.sailorID !== sailorID\n  );\n  let matchingObj = registered.filter(\n    (inspec) => inspec.sailorID === sailorID\n  )[0];\n  let replacementInspecObj = Object.assign(matchingObj, {\n    time: timeTo,\n    day: day,\n  });\n  let inspectionReqs = [...nonMatchingArr, replacementInspecObj];\n  let replacementEntriesLeft = slotsByDay[day].entriesLeft.map(\n    (element, index) =>\n      index === slotsIndex\n        ? [element[0], element[1] - 1]\n        : element[0] === timeFrom\n        ? [element[0], element[1] + 1]\n        : element\n  );\n\n  let replacementSlotsObj = Object.assign(slotsByDay, {});\n  replacementSlotsObj[day].entriesLeft = replacementEntriesLeft;\n\n  Axios.put(`https://ilca-inspection-server.herokuapp.com/signups/updateinspecs/${ilcaNum}`, {\n    inspectionReqs: inspectionReqs,\n    slotsAvailableByDay: replacementSlotsObj,\n  });\n};\n\nexport const removeSignupByEventNum = (ilcaNum) => {\n  Axios.delete(`https://ilca-inspection-server.herokuapp.com/signups/delete/${ilcaNum}`);\n};\n\nexport const removeSailorFromEvent = (ilcaNum, sailorID) => {\n  getSignupByEventNum(ilcaNum).then(results => {\n    const signup = results[0];\n    const newInspectionReqs = signup.inspectionReqs.filter(el => el.sailorID !== sailorID);\n    Axios.put(`https://ilca-inspection-server.herokuapp.com/signups/removesailor/${sailorID}/${ilcaNum}`, {\n      inspectionReqs: newInspectionReqs\n    });\n  })\n}\n\nexport const commitTimeChangeInDB = (newShutoffDate, ilcaNum) => {\n  console.log(newShutoffDate);\n  Axios.put(`https://ilca-inspection-server.herokuapp.com/signups/updateshutoff/${ilcaNum}`, {\n    shutoffDate: newShutoffDate\n  });\n}","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport moment from 'moment';\nimport '../../App.css';\n\nconst Day = ({\n  date,\n  slotsByDay,\n  getRegistered,\n  moveToggle,\n  toggledTime,\n  toggledDate,\n  unToggle,\n  sailorToMove,\n  moveSailorInDB,\n}) => {\n  const changeTimeFormat = (time) => {\n    // Modifies time format for 'HH:MM' display. Possibly a better way to do this, but not sure.\n    let div = time / 60;\n    let minutes = time % 60;\n    let hours = Math.floor(div);\n    let format = `${hours} : ${minutes === 0 ? `00` : minutes}`;\n    return (\n      <div className=\"admin-time\">\n        <i>{format}</i>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"admin-day\">\n      <h2\n        style={{\n          textAlign: 'center',\n          margin: 10,\n          borderBottom: '2px solid black',\n          paddingBottom: 10,\n        }}\n      >\n        {moment(date).format('MMM. DD, yyyy')}\n      </h2>\n      <div className=\"admin-day-slot-container\">\n        {slotsByDay\n          ? slotsByDay[date].entriesLeft.map((info, ind) => (\n              <div className=\"admin-slot\" key={ind}>\n                {\n                  <div className=\"admin-reg-sailors-container\">\n                    {moment(date).format('dddd, MMMM DD, yyyy')}\n                    {changeTimeFormat(info[0])}{' '}\n                    <div className=\"reg-sailor-flex\">\n                      {getRegistered(info[0], date)}\n                    </div>\n                    {moveToggle === true &&\n                    info[0] === toggledTime &&\n                    date === toggledDate ? (\n                      <Button\n                        variant=\"contained\"\n                        style={{\n                          backgroundColor: 'darkorange',\n                          marginBottom: 10,\n                        }}\n                        onClick={() => unToggle()}\n                      >\n                        Cancel Edit\n                      </Button>\n                    ) : (\n                      ''\n                    )}\n                    {moveToggle === true &&\n                    (info[0] !== toggledTime || date !== toggledDate) &&\n                    info[1] > 0 ? (\n                      <Button\n                        variant=\"contained\"\n                        style={{\n                          backgroundColor: 'rgb(2, 114, 186)',\n                          color: 'white',\n                          marginBottom: 10,\n                        }}\n                        onClick={() => {\n                          moveSailorInDB(sailorToMove, info[0], date, ind);\n                        }} // function params are sailorID, time, and date to which the sailor will be moved\n                      >\n                        Place Here\n                      </Button>\n                    ) : info[0] !== toggledTime ? (\n                      <Button variant=\"contained\" disabled style={{marginBottom: 10}}>\n                        Place Here\n                      </Button>\n                    ) : (\n                      ''\n                    )}\n                    <div>\n                      Slots Available: <strong>{info[1]}</strong>\n                    </div>\n                  </div>\n                }\n              </div>\n            ))\n          : ''}\n      </div>\n    </div>\n  );\n};\n\nexport default Day;\n","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchSailorDetails } from '../../javascript/timeslotLogic';\nimport { CSVLink } from 'react-csv';\nimport {\n  getSignupByEventNum,\n  updateSailorInspection,\n  removeSignupByEventNum,\n  removeSailorFromEvent,\n  commitTimeChangeInDB,\n} from '../../javascript/adminLogic';\nimport Button from '@material-ui/core/Button';\nimport DatePicker from 'react-date-picker';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport Day from './Day';\nimport { fetchEventDetails } from '../../javascript/timeslotLogic';\n\nconst ViewEvent = () => {\n  const { ilcaNum } = useParams(); // The event number, used to retrieve the correct event from the DB\n  const [currentSignup, setCurrentSignup] = useState({}); // The event matching the ilcaNum from params\n  const [dates, setDates] = useState([]); // The set of dates in the event\n  const [shutoffDate, setShutoffDate] = useState({});\n  const [slotsByDay, setSlotsByDay] = useState({}); // The slotsAvailableByDay object from the event's DB entry\n  const [registered, setRegistered] = useState([]); // The current list of people registered for equipment inspection\n  const [moveToggle, setMoveToggle] = useState(false); // Whether or not a sailor has been toggle by the admin for moving\n  const [toggledTime, setToggledTime] = useState(0); // The sailor-toggled-to-move's original inspection time\n  const [toggledDate, setToggledDate] = useState(''); // The sailor-toggled-to-move's original inspection date\n  const [sailorToMove, setSailorToMove] = useState(''); // The sailor-toggled-to-move's sailorID, e.g. 'AUTAM6'\n  const [eventDetails, setEventDetails] = useState({}); // Event details retrieved from the event API call\n  const [sailorsRemainingUnsigned, setSailorsRemainingUnsigned] = useState([]); // Sets list of sailors registered for the event, but not signed up for inspection\n  const [sailorsSignedUp, setSailorsSignedUp] = useState([]);\n  //eslint-disable-next-line\n  const [csvHeadersUnregistered, setCSVHeadersUnregistered] = useState([\n    { label: 'Sailor ID', key: 'isaf' },\n    { label: 'First Name', key: 'firstName' },\n    { label: 'Family Name', key: 'familyName' },\n  ]);\n\n  useEffect(() => {\n    // Retrieves the correct event from the DB based on the ilcaNum url param\n    getSignupByEventNum(ilcaNum).then((results) => {\n      setCurrentSignup(results[0]);\n    });\n    fetchEventDetails(ilcaNum).then((details) => {\n      setEventDetails(details);\n    });\n    //eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    // setDates(Object.keys(currentSignup.slotsAvailableByDay));\n    if (currentSignup.slotsAvailableByDay) {\n      setDates(Object.keys(currentSignup.slotsAvailableByDay));\n      setSlotsByDay(currentSignup.slotsAvailableByDay);\n      setRegistered(currentSignup.inspectionReqs);\n      setShutoffDate(\n        new Date(moment(currentSignup.shutoffDate).format('M/D/YYYY'))\n      );\n    }\n  }, [currentSignup]);\n\n  useEffect(() => {\n    fetchSailorDetails(ilcaNum).then((sailors) => {\n      const registeredSailorIDs = registered.map((el) => el.sailorID); // Creates array of all sailor IDs currently registered for inspection\n      let filteredSailors = sailors.filter(\n        (sailor) => registeredSailorIDs.indexOf(sailor.isaf) < 0\n      ); // Filters the sailors registered for the event against those currently signed up for inspectio\n      setSailorsRemainingUnsigned(filteredSailors);\n    });\n    //eslint-disable-next-line\n  }, [registered]);\n\n  useEffect(() => {\n    // Creates a sorted list for CSV export\n    let csv = [];\n    let timeList = [];\n    let timeListForFilter = [];\n    for (let day in currentSignup.slotsAvailableByDay) {\n      for (let el in currentSignup.slotsAvailableByDay[day].entriesLeft) {\n        let time = currentSignup.slotsAvailableByDay[day].entriesLeft[el][0];\n        let hours = Math.floor(time / 60);\n        let minutes = time % 60;\n        let formatted = `${hours}:${minutes === 0 ? `00` : minutes}`;\n        timeList.push(`${day}, ${formatted}`);\n        timeListForFilter.push([day, time]);\n      }\n    }\n\n    for (let i = 0; i < currentSignup.entryLimit; i++) {\n      csv.push([]);\n    }\n    console.log(csv);\n\n    for (let i = 0; i < timeListForFilter.length; i++) {\n      let currentSlot = timeListForFilter[i];\n      let filteredEntries = registered.filter(req => (req.day === currentSlot[0] && req.time === currentSlot[1]));\n      for (let y = 0; y < csv.length; y++) {\n        if (filteredEntries.length > 0) {\n          let shiftedReq = filteredEntries.shift();\n          let name = `${shiftedReq.name.firstName} ${shiftedReq.name.familyName}`;\n          csv[y][i] = name;\n        } else {\n          csv[y][i] = '';\n        }\n      }\n    }\n    csv.unshift(timeList);\n\n    setSailorsSignedUp(csv);\n    //eslint-disable-next-line\n  }, [registered]);\n\n  const toggleSailorMove = (sailorID, time, day) => {\n    // Toggles whether or not a sailor is being moved by admin to a different time/day\n    setMoveToggle(true);\n    setSailorToMove(sailorID);\n    setToggledTime(time);\n    setToggledDate(day);\n  };\n\n  const unToggleSailorMove = () => {\n    // Untoggles sailor movement\n    setMoveToggle(false);\n    setSailorToMove('');\n    setToggledTime(0);\n  };\n\n  const moveSailorInDB = (sailorID, timeTo, day, slotsIndex) => {\n    updateSailorInspection(\n      // Put request to DB updating both the sailor's inspection time/day and the slots available for the time 'from' and time 'to'\n      sailorID,\n      toggledTime,\n      timeTo,\n      day,\n      registered,\n      ilcaNum,\n      slotsByDay,\n      slotsIndex\n    );\n    setMoveToggle(false);\n    setSailorToMove('');\n    setToggledTime(0);\n  };\n\n  const handleRemoveSailor = () => {\n    removeSailorFromEvent(ilcaNum, sailorToMove);\n    setTimeout(reloadPage, 500);\n  };\n\n  const reloadPage = () => {\n    window.location.reload();\n  };\n\n  const getRegistered = (time, date) => {\n    return registered\n      .filter((item) => item.time === time && item.day === date)\n      .map((el, ind) => (\n        <div className=\"reg-sailor\" key={ind}>\n          {el.sailorID === sailorToMove ? (\n            <strong style={{ color: 'orange' }}>\n              <div>\n                <i>{el.sailorID}</i>\n              </div>\n              <div>\n                <i>\n                  {el.name.firstName[0]}. {el.name.familyName}\n                </i>\n              </div>\n            </strong>\n          ) : (\n            <strong>\n              <div>{el.sailorID}</div>\n              <div>\n                {el.name.firstName[0]}. {el.name.familyName}\n              </div>\n            </strong>\n          )}\n\n          {moveToggle === false ? (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => toggleSailorMove(el.sailorID, el.time, el.day)}\n            >\n              Edit\n            </Button>\n          ) : el.sailorID === sailorToMove ? (\n            <Button\n              variant=\"contained\"\n              style={{ backgroundColor: 'rgb(194, 60, 75)', color: 'white' }}\n              onClick={() => handleRemoveSailor()}\n            >\n              Delete Sailor\n            </Button>\n          ) : (\n            <Button variant=\"contained\" disabled>\n              Edit\n            </Button>\n          )}\n        </div>\n      ));\n  };\n\n  const deleteSheet = (e) => {\n    removeSignupByEventNum(ilcaNum);\n    setTimeout(redirToAdmin, 500);\n    e.preventDefault();\n  };\n\n  const redirToAdmin = () => {\n    window.location.href = '/';\n  };\n\n  const handleDateChange = (date) => {\n    setShutoffDate(new Date(moment(date).format('M/D/YYYY')));\n  };\n\n  const handleSubmitDateChange = (shutoff) => {\n    shutoff.setHours(23);\n    shutoff.setMinutes(59);\n    commitTimeChangeInDB(shutoff, ilcaNum);\n    setTimeout(reloadPage, 500);\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n      }}\n    >\n      {eventDetails.logo ? (\n        <div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-around',\n              width: '100%',\n            }}\n            className=\"event-header\"\n          >\n            <img\n              src=\"http://www.laserinternational.org/wp-content/uploads/2020/03/ILCA-logo-and-full-name-blue-and-grey.jpg\"\n              alt=\"ILCA Logo\"\n              style={{ width: 200 }}\n            />\n            <i>\n              <h3 style={{ fontSize: 30, textAlign: 'center' }}>\n                {eventDetails.title}\n              </h3>\n            </i>\n            <img\n              src={eventDetails.logo}\n              alt=\"Event Logo\"\n              style={{ width: 200 }}\n            />\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Link\n              style={{\n                margin: 'auto',\n                fontSize: 20,\n                textAlign: 'center',\n                marginTop: 20,\n                marginBottom: 30,\n              }}\n              to=\"/\"\n            >\n              Back to Admin\n            </Link>\n            <Link\n              to={`/signup/${currentSignup.uuid}`}\n              style={{ marginBottom: 20 }}\n            >\n              Link To Sailor Signup\n            </Link>\n            <CSVLink\n              className='link'\n              data={sailorsRemainingUnsigned}\n              headers={csvHeadersUnregistered}\n              filename={`remaining_sailors_for_event_${ilcaNum}.csv`}\n            >\n              Download CSV of Sailors Not Registered For Inspection\n            </CSVLink>\n            <CSVLink\n              className='link'\n              data={sailorsSignedUp}\n              // headers={csvHeadersRegistered}\n              filename={`sailor_inspection_list_for_event_${ilcaNum}.csv`}\n            >\n              Download CSV of Sailors Registered For Inspection\n            </CSVLink>\n            <div className=\"admin-date-picker\">\n              <strong style={{ marginBottom: 6 }}>\n                Change Signup Cutoff Date\n              </strong>\n              <DatePicker\n                value={shutoffDate}\n                onChange={(value) => handleDateChange(value)}\n              ></DatePicker>\n              <div style={{ textAlign: 'center', marginTop: 5 }}>\n                <strong>At 23:59 CST</strong>\n              </div>\n              <Button\n                variant=\"contained\"\n                style={{\n                  backgroundColor: 'rgb(2, 114, 186)',\n                  color: 'white',\n                  marginTop: 10,\n                }}\n                onClick={() => handleSubmitDateChange(shutoffDate)}\n              >\n                Commit Time Change\n              </Button>\n            </div>\n          </div>\n          <br />\n          <div>\n            {dates.length > 0\n              ? dates.map((date, index) => (\n                  <Day\n                    key={index}\n                    date={date}\n                    slotsByDay={slotsByDay}\n                    getRegistered={getRegistered}\n                    moveToggle={moveToggle}\n                    toggledTime={toggledTime}\n                    toggledDate={toggledDate}\n                    unToggle={unToggleSailorMove}\n                    sailorToMove={sailorToMove}\n                    moveSailorInDB={moveSailorInDB}\n                  />\n                ))\n              : ''}\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Button\n              style={{\n                backgroundColor: 'rgb(194, 60, 75, 1)',\n                color: 'ivory',\n                maxWidth: 300,\n                margin: 'auto !important',\n                marginBottom: 30,\n              }}\n              onClick={(e) => deleteSheet(e)}\n            >\n              Delete This Signup Sheet\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <div style={{ margin: 'auto', marginTop: '25%', fontSize: 40 }}>\n          Loading...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewEvent;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport moment from 'moment';\nimport '../../App.css';\n\nconst EventDay = ({\n  date,\n  slotsByDay,\n  getRegistered,\n  currentSailor,\n  setSelected,\n  selectedTime,\n  isSelected,\n  deselect,\n  submitInspectionReq,\n  selectedDate\n}) => {\n  const changeTimeFormat = (time) => {\n    // Modifies time format for 'HH:MM' display. Possibly a better way to do this, but not sure.\n    let div = time / 60;\n    let minutes = time % 60;\n    let hours = Math.floor(div);\n    let format = `${hours} : ${minutes === 0 ? `00` : minutes}`;\n    return (\n      <div className=\"admin-time\">\n        <i>{format}</i>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <div className=\"admin-day\">\n        <h2\n          style={{\n            textAlign: 'center',\n            margin: 10,\n            borderBottom: '2px solid black',\n            paddingBottom: 10,\n          }}\n        >\n          {moment(date).format('MMMM DD, yyyy')}\n        </h2>\n        <div className=\"admin-day-slot-container\">\n          {slotsByDay\n            ? slotsByDay[date].entriesLeft.map((info, ind) => (\n                <div className=\"admin-slot\" key={ind}>\n                  {\n                    <div className=\"admin-reg-sailors-container\">\n                      {moment(date).format('dddd, MMMM DD, yyyy')}{' '}\n                      {changeTimeFormat(info[0])}{' '}\n                      <div className=\"reg-sailor-flex\">\n                        {getRegistered(info[0], date)}\n                      </div>\n                      <div style={{ marginBottom: 10 }}>\n                        Slots Available: <i>{info[1]}</i>\n                      </div>\n                      <div>\n                        {info[1] > 0 ? (\n                          currentSailor.firstName ? (\n                            isSelected === true ? (\n                              info[0] === selectedTime && date === selectedDate ? (\n                                <div className=\"submission-cancellation-button-container\">\n                                  <Button\n                                    className=\"submission-cancellation-button\"\n                                    variant=\"contained\"\n                                    style={{\n                                      backgroundColor: 'rgb(194, 60, 75)',\n                                      color: 'white',\n                                      marginRight: 10,\n                                      width: 180,\n                                    }}\n                                    onClick={() => deselect(date, info)}\n                                  >\n                                    Cancel Placement\n                                  </Button>\n                                  <Button\n                                    className=\"submission-cancellation-button\"\n                                    variant=\"contained\"\n                                    style={{\n                                      backgroundColor: 'lightgreen',\n                                      marginLeft: 10,\n                                      width: 180,\n                                    }}\n                                    onClick={(e) => submitInspectionReq(e)}\n                                  >\n                                    Submit Request\n                                  </Button>\n                                </div>\n                              ) : (\n                                <Button\n                                  className=\"submission-cancellation-button\"\n                                  variant=\"contained\"\n                                  disabled\n                                >\n                                  Place {currentSailor.firstName}{' '}\n                                  {currentSailor.familyName} Here\n                                </Button>\n                              )\n                            ) : (\n                              <Button\n                                className=\"submission-cancellation-button\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => setSelected(date, info)}\n                              >\n                                Place {currentSailor.firstName}{' '}\n                                {currentSailor.familyName} Here\n                              </Button>\n                            )\n                          ) : (\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              disabled\n                              style={{marginBottom: 5, marginTop: 5}}\n                            >\n                              Place Sailor Here\n                            </Button>\n                          )\n                        ) : (\n                          ''\n                        )}\n                      </div>\n                    </div>\n                  }\n                </div>\n              ))\n            : ''}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EventDay;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getTimeslots } from '../../javascript/timeslotLogic';\nimport {\n  getCurrentlyScheduledInspections,\n  updateTimeslotByUUID,\n  fetchEventDetails,\n  fetchSailorDetails,\n} from '../../javascript/timeslotLogic';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport EventDay from './EventDay';\nimport moment from 'moment';\n\nconst SailorEventView = () => {\n  const [currentSignup, setCurrentSignup] = useState({}); // The currently selected signup sheet, selected by matching the correct UUID\n  const [active, setActive] = useState(false); // Whether or not the timeslot display is active\n  const [dates, setDates] = useState([]); // The set of dates in the event\n  const [slotsByDay, setSlotsByDay] = useState({}); // The slotsAvailableByDay object from the event's DB entry\n  const [registered, setRegistered] = useState([]); // The current list of people registered for equipment inspection\n  const [currentEntries, setCurrentEntries] = useState([]); // The list of current sailors registered for an event. This will be controlled later by an API call including the ilcaNum\n  const [inspectionReqIDs, setInspectionReqIDs] = useState([]);\n  const [sailorID, setSailorID] = useState(''); // The sailor's ID number\n  const [currentSailor, setCurrentSailor] = useState({}); // Sailor selected from the Autocomplete list provided\n  const [selectedTime, setSelectedTime] = useState(0);\n  const [isSelected, setIsSelected] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [eventDetails, setEventDetails] = useState({});\n  //eslint-disable-next-line\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  let { id } = useParams(); // Retrieves the id from the URL params in order to match it with a corresponding DB entry\n\n  useEffect(() => {\n    // Retrieves created timeslots on page load\n    getTimeslots().then((results) => handleIDSubmission(results));\n    //eslint-disable-next-line\n  }, []);\n\n  const handleIDSubmission = (timeslots) => {\n    // Handles submission of an ID. If it matches that of a created timeslot, it will display that timeslot\n    const filteredTimeslots = timeslots.filter(\n      (timeslot) => timeslot.uuid === id\n    );\n    if (!filteredTimeslots.length > 0) {\n      alert(`This id doesn't match a registered Inspection Signup`);\n    } else {\n      setCurrentSignup(filteredTimeslots[0]);\n      setActive(true);\n    }\n  };\n\n  useEffect(() => {\n    if (currentSignup.slotsAvailableByDay) {\n      setDates(Object.keys(currentSignup.slotsAvailableByDay));\n      setSlotsByDay(currentSignup.slotsAvailableByDay);\n      setRegistered(currentSignup.inspectionReqs);\n      setInspectionReqIDs(\n        currentSignup.inspectionReqs.map((req, ind) => req.sailorID)\n      );\n    }\n    if (currentSignup.ilcaNum) {\n      fetchEventDetails(currentSignup.ilcaNum).then((results) =>\n        setEventDetails(results)\n      );\n      fetchSailorDetails(currentSignup.ilcaNum).then((results) => {\n        let sorted = results.sort((a, b) => (a.isaf > b.isaf ? 1 : -1));\n        setCurrentEntries(sorted);\n      });\n    }\n  }, [currentSignup]);\n\n  useEffect(() => {\n    // Every time sailorID updates, if that sailorID matches one in the currentEntries, currentSailor will update to reflect that selected sailor from the entries list\n    const selectedSailor = currentEntries.filter(\n      (entry) => entry.isaf === sailorID\n    );\n    if (selectedSailor.length > 0) {\n      setCurrentSailor(selectedSailor[0]);\n    } else {\n      setCurrentSailor({});\n    }\n    //eslint-disable-next-line\n  }, [sailorID]);\n\n  const getRegistered = (time, date) => {\n    return registered\n      .filter((item) => item.time === time && item.day === date)\n      .map((el, ind) => (\n        <div className=\"reg-sailor\" key={ind}>\n          <strong>\n            {el.name.firstName} {el.name.familyName}\n          </strong>\n        </div>\n      ));\n  };\n\n  const onInputChange = (event, value) => {\n    // Sets the current sailorID based on the Autocomplete field's value\n    if (value) {\n      setSailorID(value.isaf);\n    } else {\n      setSailorID('');\n    }\n    setIsSelected(false);\n  };\n\n  const setSelected = (date, info) => {\n    setSelectedTime(info[0]);\n    setIsSelected(true);\n    setSelectedDate(date);\n  };\n\n  const deselect = (date, info) => {\n    setSelectedTime(0);\n    setIsSelected(false);\n    setSelectedDate('');\n  };\n\n  const submitInspectionReq = (e) => {\n    // Submits an inspection request if all fields are filled out\n    console.log(sailorID, selectedTime, selectedDate);\n    if (sailorID === '' || selectedTime === 0 || selectedDate === '') {\n      alert('please enter Sailor ID and select a day and timeslot');\n      return;\n    }\n    if (\n      currentEntries.filter((entry) => entry.isaf === sailorID).length === 0 // If a sailor with the given ID is not registered for the specific event this is for\n    ) {\n      alert(\n        `Sailor with ID: \"${sailorID}\" not found in current race entries. Sailor must be entered to request inspection`\n      );\n      return;\n    }\n    getCurrentlyScheduledInspections(id).then(\n      // retrieves the list of sailors for the given event already entered for inspection\n      (currentlyScheduledInspections) => {\n        if (\n          currentlyScheduledInspections.filter(\n            (inspection) => inspection.sailorID === sailorID\n          ).length > 0\n        ) {\n          alert(\n            `Sailor with ID: \"${sailorID}\" already entered for inspection.`\n          );\n          return;\n        }\n        const sailorEntry = currentEntries.filter(\n          (entry) => entry.isaf === sailorID\n        );\n        let firstName = sailorEntry[0].firstName;\n        let familyName = sailorEntry[0].familyName;\n        console.log(firstName, familyName);\n        let inspectionReq = {\n          // This is the format of the inspection request, so that the information can later be displayed publicly or on the admin page\n          eventTitle: currentSignup.eventTitle,\n          day: selectedDate,\n          time: selectedTime,\n          name: {\n            firstName: firstName,\n            familyName: familyName,\n          },\n          sailorID: sailorID,\n        };\n        updateTimeslotByUUID(\n          // Sends a PUT request to the DB, updating the information for a specific event based on the UUID provided\n          id,\n          selectedDate,\n          selectedTime,\n          slotsByDay,\n          inspectionReq\n        );\n        setTimeout(reloadPage, 500); // Refreshes the page after 500ms, to ensure that the correct data will be displayed and the frontend has a chance to catch up with the db information\n      }\n    );\n    e.preventDefault(); // prevent immediate page refresh\n  };\n\n  const reloadPage = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n      }}\n    >\n      {active === false || !eventDetails.logo ? (\n        <div className=\"timeslot-search-container\">\n          <h1>Loading Inspection Signup...</h1>\n        </div>\n      ) : \n        <div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-around',\n              width: '100%',\n            }}\n            className=\"event-header\"\n          >\n            <img\n              src=\"http://www.laserinternational.org/wp-content/uploads/2020/03/ILCA-logo-and-full-name-blue-and-grey.jpg\"\n              alt=\"ILCA Logo\"\n              style={{ width: 200 }}\n            />\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'space-around',\n              }}\n            >\n              <i>\n                <h3\n                  style={{\n                    fontSize: 30,\n                    textAlign: 'center',\n                    marginBottom: 10,\n                  }}\n                >\n                  {eventDetails.title}\n                </h3>\n              </i>\n              <h3 style={{ fontSize: 24 }}>Equipment Inspection Signup</h3>\n            </div>\n            <img\n              src={eventDetails.logo}\n              alt=\"Event Logo\"\n              style={{ width: 200 }}\n            />\n          </div>\n          <hr\n            style={{\n              height: 2,\n              border: 0,\n              backgroundColor: 'grey',\n              marginTop: 20,\n            }}\n          />\n          <div\n            style={{\n              margin: 'auto',\n              textAlign: 'center',\n              fontSize: 20,\n              marginBottom: 30,\n            }}\n          >\n            <h3>{`${eventDetails.country}, ${eventDetails.city}`}</h3>\n          </div>\n          <div\n            style={{\n              margin: 'auto',\n              textAlign: 'center',\n              fontSize: 20,\n              marginBottom: 30,\n            }}\n          >\n            <strong>\n              {moment(eventDetails.startDate.date).format(\n                'dddd, MMMM Do, YYYY'\n              )}{' '}\n              —{' '}\n              {moment(eventDetails.endDate.date).format('dddd, MMMM Do, YYYY')}\n            </strong>\n          </div>\n          <div style={{ margin: 'auto', textAlign: 'center', fontSize: 20 }}>\n            1. Begin typing a sailor's name or sailor ID in the form below <br />\n            2. Select the timeslot you'd like to have for equipment inspection <br />\n            3. Click the submit button\n                <br />\n                <br />\n            <strong>If you submitted a time but would like to change it, please contact the ILCA office</strong>\n          </div>\n          {currentDate < new Date(currentSignup.shutoffDate) ? (\n          <form className=\"signup-form\">\n            <Autocomplete // Autocomplete form that has the currently entered sailors for the specific event as options\n              id=\"combo-box-demo\"\n              options={currentEntries.filter(\n                (sailor) => inspectionReqIDs.indexOf(sailor.isaf) < 0\n              )}\n              getOptionLabel={(option) =>\n                `${option.isaf} – ${option.firstName} ${option.familyName}`\n              }\n              getOptionSelected={(option) => option.isaf}\n              onChange={onInputChange}\n              style={{ width: 300 }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Sailor\"\n                  variant=\"outlined\"\n                  value={sailorID}\n                />\n              )}\n            />\n            <div>\n              {!currentSailor.isaf ? (\n                <h3>Please Select Sailor</h3>\n              ) : (\n                <h3>\n                  {currentSailor.isaf} - {currentSailor.firstName}{' '}\n                  {currentSailor.familyName}\n                </h3>\n              )}\n              {/* {requestingInspection === true ? (\n                <h3>Sending Inspection Request...</h3>\n              ) : (\n                ''\n              )} */}\n            </div>\n          </form>\n          ): <h3 style={{textAlign: 'center', color: 'red'}}><i>Inspection Signup Has Expired</i></h3>}\n          {dates.length > 0\n            ? dates.map((date, index) => (\n                <EventDay\n                  key={index}\n                  date={date}\n                  slotsByDay={slotsByDay}\n                  getRegistered={getRegistered}\n                  currentSailor={currentSailor}\n                  setSelected={setSelected}\n                  selectedTime={selectedTime}\n                  selectedDate={selectedDate}\n                  isSelected={isSelected}\n                  deselect={deselect}\n                  submitInspectionReq={submitInspectionReq}\n                />\n              ))\n            : ''}\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default SailorEventView;\n","import './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Admin from './Components/Admin/Admin.jsx';\nimport NotFound from './Components/NotFound.jsx';\nimport TimeslotPost from './Components/Admin/TimeslotPost.jsx';\nimport AdminEventView from './Components/Admin/AdminEventView.jsx';\nimport SailorEventView from './Components/Timeslot/SailorEventView';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Admin} />\n        <Route exact path='/admin/create' component={TimeslotPost} />\n        <Route exact path='/signup/:id' children={<SailorEventView />}/>\n        <Route exact path='/admin/event/:ilcaNum' children={<AdminEventView />}/>\n        <Route path='/' component={NotFound}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}